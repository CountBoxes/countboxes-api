generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userCode Int @id @default(autoincrement())

  name            String
  cpf             String
  phone           String
  type            String
  active          Boolean
  email           String  @unique
  password        String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Transaction   Transaction[]
  Load      Load[]

  @@map("users")
}

model Product {
  productCode Int @id @unique

  description String
  grossWeight Float // Peso bruto
  netWeight   Float // Peso l√≠quido
  unit        String // Unidade de medida

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderProduct OrderProduct[]

  @@map("products")
}
enum OrderStatus {
  ABERTO
  CARREGADO
  EM_TRANSITO
  ENTREGUE
  CANCELADO
  DEVOLVIDO
}
model Order {
  orderCode Int @id @default(autoincrement())

  clientCode Int
  client     Client @relation(fields: [clientCode], references: [clientCode])
  
  loadCode Int
  load     Load @relation(fields: [loadCode], references: [loadCode])

  status OrderStatus 

  shipping Float
  address   String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  Transaction      Transaction[]
  OrderProduct     OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  orderProductCode Int @id @default(autoincrement())

  quantity Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Transaction   Transaction[]

  productCode Int
  product     Product @relation(fields: [productCode], references: [productCode])

  orderCode Int
  order     Order @relation(fields: [orderCode], references: [orderCode])

  @@map("orderProducts")
}

enum TransactionCategory {
  CARREGAMENTO
  DESCARREGAMENTO
}

model Transaction  {
  transactionCode Int @id @default(autoincrement())

  transactionCategory TransactionCategory

  orderProductCode Int 
  orderProduct     OrderProduct @relation(fields: [orderProductCode], references: [orderProductCode])

  productCode Int

  orderCode Int
  order     Order @relation(fields: [orderCode], references: [orderCode])

  userCode Int
  user     User @relation(fields: [userCode], references: [userCode])

  loadCode Int
  load      Load @relation(fields: [loadCode], references: [loadCode])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}


model Client {
  clientCode Int @id @default(autoincrement())

  CNPJ    String @unique
  name    String
  phone   String
  country String
  region  String
  state   String
  city    String
  street  String
  number  String
  zipCode String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order   Order[]

  @@map("clients")
}

enum LoadStatus {
  PENDENTE
  AGENDADO
  CARREGANDO
  CARREGADO
  EM_TRANSITO
  ENTREGUE
  CANCELADO
  RETORNADO
}

model Load {
  loadCode Int @id @default(autoincrement())

  vehicleCode Int
  vehicle     Vehicle @relation(fields: [vehicleCode], references: [vehicleCode])

  status LoadStatus

  userCode Int
  user     User @relation(fields: [userCode], references: [userCode])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions   Transaction[]
  orders         Order[]

  @@map("loads")
}

model Vehicle {
  vehicleCode Int @id @default(autoincrement())

  plate  String  @unique
  model  String
  type   String
  active Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Load      Load[]

  @@map("vehicles")
}
